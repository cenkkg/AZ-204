1/8/2 ---------------------------------------------------------------------------------------------------------------------
INTRODUCTION
Azure Event Hubs is a big data streaming platform and event ingestion service.
It can receive and process millions of events per second.
Data sent to an event hub can be transformed and stored by using any real-time analytics provider or batching/storage adapters.

2/8/2 ---------------------------------------------------------------------------------------------------------------------
Discover Azure Event Hubs...
    Azure Event Hubs represents the "front door" for an event pipeline, often called an event ingestor in solution architectures. 
    An event ingestor is a component or service that sits between event publishers 
        and event consumers to decouple the production of an event stream from the consumption of those events.
    Key features:
        + Fully managed PaaS
        + Real-time and batch processing
        + Capture event data
        + Scalable
        + Rich ecosystem

Key concepts:
    + An Event Hubs client is the primary interface for developers interacting with the Event Hubs client library.
    + An Event Hubs producer is a type of client that serves as a source of telemetry data.
    + An Event Hubs consumer is a type of client that reads information from the Event Hubs and allows processing of it. 
    + A partition is an ordered sequence of events that is held in an Event Hubs.
    + A consumer group is a view of an entire Event Hubs.
        There can be at most five concurrent readers on a partition per consumer group; 
            however it's recommended that there's only one active consumer for a given partition and consumer group pairing.
    + Event receivers: Any entity that reads event data from an Event Hubs.
    + Throughput units or processing units: Prepurchased units of capacity that control the throughput capacity of Event Hubs.

3/8/2 ---------------------------------------------------------------------------------------------------------------------
Explore Event Hubs Capture...
    Azure Event Hubs enables you to automatically capture the streaming data in Event Hubs 
        in an Azure Blob storage or Azure Data Lake Storage account of your choice, 
        with the added flexibility of specifying a time or size interval.

How Event Hubs Capture works...
    Event Hubs is a time-retention durable buffer for telemetry ingress, similar to a distributed log.
    The key to scaling in Event Hubs is the partitioned consumer model.
    ! Each partition is an independent segment of data and is consumed independently. !

    ! Event Hubs Capture enables you to specify your own Azure Blob storage account and container, 
        or Azure Data Lake Store account, which are used to store the captured data. !

    Captured data is written in Apache Avro format: a compact, fast, binary format that provides rich data structures with inline schema.

Capture windowing...
    Event Hubs Capture enables you to set up a window to control capturing.
    This window is a minimum size and time configuration with a "first wins policy,"
        meaning that the first trigger encountered causes a capture operation.
    The storage naming convention is as follows:    
        {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}
            E.g.:
                """ 
                    https://mystorageaccount.blob.core.windows.net/mycontainer/mynamespace/myeventhub/0/2017/12/08/03/03/17.avro
                """

Scaling to throughput units...
    Event Hubs traffic is controlled by throughput units.
    A single throughput unit allows 1 MB per second or 1000 events per second of ingress and twice that amount of egress.
    Standard Event Hubs can be configured with 1-20 throughput units, and you can purchase more with a quota increase support request.

4/8/2 ---------------------------------------------------------------------------------------------------------------------
Scale your processing application...
    To scale your event processing application, you can run multiple instances of the application and have it balance the load among themselves.
    In the older versions, EventProcessorHost allowed you to balance the load between multiple instances of your program and checkpoint events when receiving.
    ! In the newer versions (5.0 onwards), EventProcessorClient (.NET and Java), or EventHubConsumerClient (Python and JavaScript) allows you to do the same. !

Event processor or consumer client...
    You don't need to build your own solution to meet these requirements.
    The Azure Event Hubs SDKs provide this functionality.

Partition ownership tracking...
    An event processor instance typically owns and processes events from one or more partitions.
    Ownership of partitions is evenly distributed among all the active event processor instances 
        associated with an event hub and consumer group combination.
    Each event processor is given a unique identifier and claims ownership of partitions by adding or updating an entry in a "checkpoint store".
    All event processor instances communicate with this store periodically to update its own processing state and to learn about other active instances.
    This data is then used to balance the load among the active processors.

Receive messages...
    When you create an event processor, you specify the functions that process events and errors.
    Each call to the function that processes events delivers a single event from a specific partition.

Checkpointing...
    Checkpointing is a process by which an event processor marks or commits the position 
        of the last successfully processed event within a partition.
    Marking a checkpoint is typically done within the function that 
        processes the events and occurs on a per-partition basis within a consumer group.

Thread safety and processor instances...
    By default, the function that processes the events is called sequentially for a given partition.

5/8/2 ---------------------------------------------------------------------------------------------------------------------
Control access to events...
Azure Event Hubs supports both Azure Active Directory and shared access signatures (SAS) to handle both authentication and authorization.
Azure provides the following Azure built-in roles for authorizing access to Event Hubs data using Azure Active Directory and OAuth:
    + Azure Event Hubs Data Owner: Use this role to give complete access to Event Hubs resources.
    + Azure Event Hubs Data Sender: Use this role to give send access to Event Hubs resources.
    + Azure Event Hubs Data Receiver: Use this role to give receiving access to Event Hubs resources.

Authorize access with managed identities...
    To authorize a request to Event Hubs service from a managed identity in your application, 
        you need to configure Azure role-based access control settings for that managed identity.
    Azure Event Hubs defines Azure roles that encompass permissions for sending and reading from Event Hubs.

Authorize access with Microsoft Identity Platform...
    A key advantage of using Azure AD with Event Hubs is that your credentials no longer need to be stored in your code. 
    Instead, you can request an OAuth 2.0 access token from Microsoft identity platform.
    Azure AD authenticates the security principal (a user, a group, or service principal) running the application.
    If authentication succeeds, Azure AD returns the access token to the application, 
        and the application can then use the access token to authorize requests to Azure Event Hubs.

Authorize access to Event Hubs publishers with shared access signatures...
    An event publisher defines a virtual endpoint for an Event Hubs.
    The publisher can only be used to send messages to an event hub and not receive messages.
    Each Event Hubs client is assigned a unique token that is uploaded to the client.
    A client that holds a token can only send to one publisher, and no other publisher.

Authorize access to Event Hubs consumers with shared access signatures...

6/8/2 ---------------------------------------------------------------------------------------------------------------------
Perform common operations with the Event Hubs client library...

Inspect Event Hubs...
    Many Event Hubs operations take place within the scope of a specific partition.
    Because partitions are owned by the Event Hubs, their names are assigned at the time of creation.
    To understand what partitions are available, you query the Event Hubs using one of the Event Hubs clients.
        """
            var connectionString = "<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>";
            var eventHubName = "<< NAME OF THE EVENT HUB >>";

            await using (var producer = new EventHubProducerClient(connectionString, eventHubName))
            {
                string[] partitionIds = await producer.GetPartitionIdsAsync();
            }
        """

Publish events to Event Hubs...
    In order to publish events, you need to create an EventHubProducerClient.
    Producers publish events in batches and may request a specific partition, 
        or allow the Event Hubs service to decide which partition events should be published to. 
    ! We recommended using automatic routing when the publishing of events needs to be highly available or when event data should be 
        distributed evenly among the partitions. !

        """
            var connectionString = "<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>";
            var eventHubName = "<< NAME OF THE EVENT HUB >>";

            await using (var producer = new EventHubProducerClient(connectionString, eventHubName))
            {
                using EventDataBatch eventBatch = await producer.CreateBatchAsync();
                eventBatch.TryAdd(new EventData(new BinaryData("First")));
                eventBatch.TryAdd(new EventData(new BinaryData("Second")));

                await producer.SendAsync(eventBatch);
            }
        """

Read events from an Event Hubs...
    In order to read events from an Event Hubs, you need to create an EventHubConsumerClient for a given consumer group.
    When an Event Hubs is created, it provides a default consumer group that can be used to get started with exploring Event Hubs.
        """
            var connectionString = "<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>";
            var eventHubName = "<< NAME OF THE EVENT HUB >>";

            string consumerGroup = EventHubConsumerClient.DefaultConsumerGroupName;

            await using (var consumer = new EventHubConsumerClient(consumerGroup, connectionString, eventHubName))
            {
                using var cancellationSource = new CancellationTokenSource();
                cancellationSource.CancelAfter(TimeSpan.FromSeconds(45));

                await foreach (PartitionEvent receivedEvent in consumer.ReadEventsAsync(cancellationSource.Token))
                {
                    // At this point, the loop will wait for events to be available in the Event Hub.  When an event
                    // is available, the loop will iterate with the event that was received.  Because we did not
                    // specify a maximum wait time, the loop will wait forever unless cancellation is requested using
                    // the cancellation token.
                }
            }
        """

Read events from an Event Hubs partition...
    To read from a specific partition, the consumer needs to specify where in the event stream to begin receiving events; in our example,
        we focus on reading all published events for the first partition of the Event Hubs.
        """
            var connectionString = "<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>";
            var eventHubName = "<< NAME OF THE EVENT HUB >>";

            string consumerGroup = EventHubConsumerClient.DefaultConsumerGroupName;

            await using (var consumer = new EventHubConsumerClient(consumerGroup, connectionString, eventHubName))
            {
                EventPosition startingPosition = EventPosition.Earliest;
                string partitionId = (await consumer.GetPartitionIdsAsync()).First();

                using var cancellationSource = new CancellationTokenSource();
                cancellationSource.CancelAfter(TimeSpan.FromSeconds(45));

                await foreach (PartitionEvent receivedEvent in consumer.ReadEventsFromPartitionAsync(partitionId, startingPosition, cancellationSource.Token))
                {
                    // At this point, the loop will wait for events to be available in the partition.  When an event
                    // is available, the loop will iterate with the event that was received.  Because we did not
                    // specify a maximum wait time, the loop will wait forever unless cancellation is requested using
                    // the cancellation token.
                }
            }
        """

7/8/2 ---------------------------------------------------------------------------------------------------------------------
TEST

8/8/2 ---------------------------------------------------------------------------------------------------------------------
SUMMARY