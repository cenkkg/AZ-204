1/10/1 ---------------------------------------------------------------------------------------------------------------------
INTRODUCTION

Azure supports two types of queue mechanisms: Service Bus queues and Storage queues.
Service Bus queues are part of a broader Azure messaging infrastructure
    that supports queuing, 
    publish/subscribe,
    and more advanced integration patterns.

Storage queues are part of the Azure Storage infrastructure.
    They allow you to store large numbers of messages. 
    You access messages from anywhere in the world via authenticated calls using HTTP or HTTPS.

2/10/1 ---------------------------------------------------------------------------------------------------------------------
Choose a message queue solution...

Storage queues and Service Bus queues have a slightly different feature set. You can choose either one or both, 
    depending on the needs of your particular solution.

1- Consider using Service Bus queues:
    + Your solution needs to receive messages without having to poll the queue.
        With Service Bus, you can achieve it by using a long-polling receive operation using the TCP-based protocols that Service Bus supports.
    + Your solution requires the queue to provide a guaranteed first-in-first-out (FIFO) ordered delivery.
    + Your solution needs to support automatic duplicate detection.
    + Your solution requires transactional behavior and atomicity when sending or receiving multiple messages from a queue.

2- Consider using Storage queues:
    + Your application must store over 80 gigabytes of messages in a queue.
    + Your application wants to track progress for processing a message in the queue
    + You require server side logs of all of the transactions executed against your queues.

3/10/1 ---------------------------------------------------------------------------------------------------------------------
Explore Azure Service Bus...

Microsoft Azure Service Bus is a fully managed enterprise integration message broker.
Service Bus can decouple applications and services.
Data is transferred between different applications and services using messages.
! A message is a container decorated with metadata, and contains data. !
    Message:
        + metadata
        + data: In any form, including JSON, XML, Apache Avro, Plain Text...

Some common messaging scenarios are:
    + Messaging. Transfer business data, such as sales or purchase orders, journals, or inventory movements.
    + Decouple applications. Improve reliability and scalability of applications and services. Client and service don't have to be online at the same time.
    + Topics and subscriptions. Enable 1:n relationships between publishers and subscribers.
    + Message sessions. Implement workflows that require message ordering or message deferral.

Service Bus tiers...
    Service Bus offers a standard and premium tier.

Advanced features...
    Service Bus includes advanced features that enable you to solve more complex messaging problems.
        + Message sessions: To create a first-in, first-out (FIFO) guarantee in Service Bus, use sessions.
        + Dead-letter queue: Service Bus supports a dead-letter queue (DLQ)
            A DLQ holds messages that can't be delivered to any receiver. 
            Service Bus lets you remove messages from the DLQ and inspect them.
        + Scheduled delivery: You can submit messages to a queue or topic for delayed processing.
            You can schedule a job to become available for processing by a system at a certain time.
        + Batching: Client-side batching enables a queue or topic client to delay sending a message for a certain period of time.
        
Compliance with standards and protocols...
    The primary wire protocol for Service Bus is Advanced Messaging Queueing Protocol (AMQP) 1.0, an open ISO/IEC standard.


4/10/1 ---------------------------------------------------------------------------------------------------------------------
Discover Service Bus queues, topics, and subscriptions...
    The messaging entities that form the core of the messaging capabilities in Service Bus are:
        + queues
        + topics
        + subscriptions
        + rules/actions

    * Queues:
        Queues offer First In, First Out (FIFO) message delivery to one or more competing consumers.
        And, only one message consumer receives and processes each message.
        ! A related benefit is load-leveling, which enables producers and consumers to send and receive messages at different rates. !

    * Receive modes:
        You can specify two different modes in which Service Bus receives messages: Receive and delete or Peek lock.
            + Receive and delete:
                In this mode, when Service Bus receives the request from the consumer, it marks the message as consumed and returns it to the consumer application.
                This mode is the simplest model.
                It works best for scenarios in which the application can tolerate not processing a message if a failure occurs.

            + Peek lock:
                In this mode, the receive operation becomes two-stage, which makes it possible to support applications that can't tolerate missing messages.
                    - Finds the next message to be consumed, locks it to prevent other consumers from receiving it, and then, return the message to the application.
                    - After the application finishes processing the message, it requests the Service Bus service to complete the second stage of the receive process. Then, the service marks the message as consumed.
                If the application is unable to process the message for some reason, it can request the Service Bus service to abandon the message.
                Service Bus unlocks the message and makes it available to be received again, either by the same consumer or by another competing consumer.
                Secondly, there's a timeout associated with the lock.
                    If the application fails to process the message before the lock timeout expires, Service Bus unlocks the message and makes it available to be received again.

    * Topics and subscriptions:
        A queue allows processing of a message by a single consumer.
        In contrast to queues, topics and subscriptions provide a one-to-many form of communication in a publish and subscribe pattern.
        It's useful for scaling to large numbers of recipients.
            !!! Each published message is made available to each subscription registered with the topic. !!!
            !!! Publisher sends a message to a topic and one or more subscribers receive a copy of the message, depending on filter rules set on these subscriptions. !!!
        ! Publishers send messages to a topic in the same way that they send messages to a queue. !
            But, consumers don't receive messages directly from the topic.
            Instead, consumers receive messages from subscriptions of the topic.
            A topic subscription resembles a virtual queue that receives copies of the messages that are sent to the topic. 
            ! Consumers receive messages from a subscription identically to the way they receive messages from a queue. !
        Creating a topic is similar to creating a queue, as described in the previous section.

    * Rules and actions:
        In many scenarios, messages that have specific characteristics must be processed in different ways.
        To enable this processing, you can configure subscriptions to find messages that have desired properties and then perform certain modifications to those properties.
        !!! While Service Bus subscriptions see all messages sent to the topic, you can only copy a subset of those messages to the virtual subscription queue. !!!
        This filtering is accomplished using subscription filters.
        Such modifications are called filter actions.
            When a subscription is created, you can supply a filter expression that operates on the properties of the message.

5/10/1 ---------------------------------------------------------------------------------------------------------------------
Explore Service Bus message payloads and serialization...

Messages carry a payload and metadata.
    The metadata is in the form of key-value pair properties, and describes the payload, and gives handling instructions to Service Bus and applications.
    Occasionally, that metadata alone is sufficient to carry the information that the sender wants to communicate to receivers, and the payload remains empty.

A Service Bus message consists of a binary payload section that Service Bus never handles in any form on the service-side, and two sets of properties.
    + The broker properties are system defined.
        These predefined properties either control message-level functionality inside the broker, or they map to common and standardized metadata items.
    + The user properties are a collection of key-value pairs defined and set by the application.

Message routing and correlation...
    A subset of the broker properties, specifically 
        To, ReplyTo, ReplyToSessionId, MessageId, CorrelationId, and SessionId, help applications route messages to particular destinations.
        + Simple request/reply:
            A publisher sends a message into a queue and expects a reply from the message consumer.
            The publisher owns a queue to receive the replies.
            The address of that queue is contained in the ReplyTo property of the outbound message.
            When the consumer responds, it copies the MessageId of the handled message into the CorrelationId property of the reply message and delivers the message to the destination indicated by the ReplyTo property.
            One message can yield multiple replies, depending on the application context.
        + Multicast request/reply:
            As a variation of the prior pattern, a publisher sends the message into a topic and multiple subscribers become eligible to consume the message.
            Each of the subscribers might respond in the fashion described previously.
            If ReplyTo points to a topic, such a set of discovery responses can be distributed to an audience.
        + Multiplexing:
            This session feature enables multiplexing of streams of related messages through a single queue or subscription such that each session (or group) of related messages,
                identified by matching SessionId values,
                are routed to a specific receiver while the receiver holds the session under lock.
        + Multiplexed request/reply:
            This session feature enables multiplexed replies, allowing several publishers to share a reply queue.
            By setting ReplyToSessionId, the publisher can instruct the consumer(s) to copy that value into the SessionId property of the reply message.

Payload serialization...
    When in transit or stored inside of Service Bus, the payload is always an opaque, binary block.
    The ContentType property enables applications to describe the payload, with the suggested format for the property values being a MIME content-type description according to IETF RFC2045; for example, application/json;charset=utf-8.

6/10/1 ---------------------------------------------------------------------------------------------------------------------
EXERCISE

After creating resource group and global variables, you need to create 
    servicebus namespace:
        """
            az servicebus namespace create \
            --resource-group az204-svcbus-rg \
            --name $myNameSpaceName \
            --location $myLocation
        """

Afterwards, you need to create serviceBus queue:
    """
        az servicebus queue create --resource-group az204-svcbus-rg \
        --namespace-name $myNameSpaceName \
        --name az204-queue
    """

Retrieve the connection string for the Service Bus Namespace...
    Open the Azure portal and navigate to the az204-svcbus-rg resource group.
    Select the az204svcbus resource you created.
    Select Shared access policies in the Settings section, then select the RootManageSharedAccessKey policy.
    Copy the Primary Connection String from the dialog box that opens up and save it to a file, or leave the portal open and copy the key when needed.

Create console app to send messages to the queue...
    1- You need to add this using statement:
        using Azure.Messaging.ServiceBus;

    2- Adding some variables:
        """
            // connection string to your Service Bus namespace
            string connectionString = "<CONNECTION STRING>";

            // name of your Service Bus topic
            string queueName = "az204-queue";
        """           
    
    3- Add the following code below the variables you just added. See code comments for details:
        """
            // the client that owns the connection and can be used to create senders and receivers
            ServiceBusClient client;

            // the sender used to publish messages to the queue
            ServiceBusSender sender;

            // Create the clients that we'll use for sending and processing messages.
            client = new ServiceBusClient(connectionString);
            sender = client.CreateSender(queueName);

            // create a batch 
            using ServiceBusMessageBatch messageBatch = await sender.CreateMessageBatchAsync();

            for (int i = 1; i <= 3; i++)
            {
                // try adding a message to the batch
                if (!messageBatch.TryAddMessage(new ServiceBusMessage($"Message {i}")))
                {
                    // if an exception occurs
                    throw new Exception($"Exception {i} has occurred.");
                }
            }

            try
            {
                // Use the producer client to send the batch of messages to the Service Bus queue
                await sender.SendMessagesAsync(messageBatch);
                Console.WriteLine($"A batch of three messages has been published to the queue.");
            }
            finally
            {
                // Calling DisposeAsync on client types is required to ensure that network
                // resources and other unmanaged objects are properly cleaned up.
                await sender.DisposeAsync();
                await client.DisposeAsync();
            }

            Console.WriteLine("Follow the directions in the exercise to review the results in the Azure portal.");
            Console.WriteLine("Press any key to continue");
            Console.ReadKey();
        """

    4- Afterwards, you can see messages from Azure Portal:
        - Sign in to the Azure portal and navigate to your Service Bus namespace. Select the Service Bus Explorer in the Service Bus Queue navigation pane.
        - Select Peek from start and the three messages that were sent appear.

    5- Also, we write code (C#) to read messages from queue:
        """
            ServiceBusProcessor processor;
            client = new ServiceBusClient(connectionString);

            // create a processor that we can use to process the messages
            processor = client.CreateProcessor(queueName, new ServiceBusProcessorOptions());

            try
            {
                // add handler to process messages
                processor.ProcessMessageAsync += MessageHandler;

                // add handler to process any errors
                processor.ProcessErrorAsync += ErrorHandler;

                // start processing 
                await processor.StartProcessingAsync();

                Console.WriteLine("Wait for a minute and then press any key to end the processing");
                Console.ReadKey();

                // stop processing 
                Console.WriteLine("\nStopping the receiver...");
                await processor.StopProcessingAsync();
                Console.WriteLine("Stopped receiving messages");
            }
            finally
            {
                // Calling DisposeAsync on client types is required to ensure that network
                // resources and other unmanaged objects are properly cleaned up.
                await processor.DisposeAsync();
                await client.DisposeAsync();
            }

            // handle received messages
            async Task MessageHandler(ProcessMessageEventArgs args)
            {
                string body = args.Message.Body.ToString();
                Console.WriteLine($"Received: {body}");

                // complete the message. messages is deleted from the queue. 
                await args.CompleteMessageAsync(args.Message);
            }

            // handle any errors when receiving messages
            Task ErrorHandler(ProcessErrorEventArgs args)
            {
                Console.WriteLine(args.Exception.ToString());
                return Task.CompletedTask;
            }
        """ 
        In here, 'client.CreateProcessor', creates message processor which will process messages from queue.
        We need to add 'MessageHandler' and 'ErrorHandler' to processor:
            + Message Handler: 
                """
                    // handle received messages
                    async Task MessageHandler(ProcessMessageEventArgs args)
                    {
                        string body = args.Message.Body.ToString();
                        Console.WriteLine($"Received: {body}");

                        // complete the message. messages is deleted from the queue. 
                        await args.CompleteMessageAsync(args.Message);
                    }
                """
            + Error Handler:
                """
                    // handle any errors when receiving messages
                    Task ErrorHandler(ProcessErrorEventArgs args)
                    {
                        Console.WriteLine(args.Exception.ToString());
                        return Task.CompletedTask;
                    }
                """
        !!!
            After reading all messages via C# code,
                if you go to Azure Portal, you can not see any messages in there because we can read messages only once in Queue.
        !!!


7/10/1 ---------------------------------------------------------------------------------------------------------------------
Explore Azure Queue Storage...
    Azure Queue Storage is a service for storing large numbers of messages.
    You access messages from anywhere in the world via authenticated calls using HTTP or HTTPS.
    A queue message can be up to 64 KB in size.
    A queue may contain millions of messages, up to the total capacity limit of a storage account.
    Queues are commonly used to create a backlog of work to process asynchronously.

    The Queue service contains the following components:
        + URL format:
           Queues are addressable using the URL format https://<storage account>.queue.core.windows.net/<queue> 
           For example, the following URL addresses a queue in the diagram above https://myaccount.queue.core.windows.net/images-to-download
        + Storage account: 
            All access to Azure Storage is done through a storage account.
        + Queue:
            A queue contains a set of messages. All messages must be in a queue.
            The queue name must be all lowercase.
        + Message:
            A message, in any format, of up to 64 KB.

8/10/1 ---------------------------------------------------------------------------------------------------------------------
Create and manage Azure Queue Storage and messages by using .NET...

    1- Create the Queue service client:
        The QueueClient class enables you to retrieve queues stored in Queue storage.
            """
                QueueClient queueClient = new QueueClient(connectionString, queueName);
            """

    2- Create a queue:
        This example shows how to create a queue if it doesn't already exist:
            """
                // Get the connection string from app settings
                string connectionString = ConfigurationManager.AppSettings["StorageConnectionString"];

                // Instantiate a QueueClient which will be used to create and manipulate the queue
                QueueClient queueClient = new QueueClient(connectionString, queueName);

                // Create the queue
                queueClient.CreateIfNotExists();
            """
            
    3- 