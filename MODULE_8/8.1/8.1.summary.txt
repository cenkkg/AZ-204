1/10/1 ---------------------------------------------------------------------------------------------------------------------
INTRODUCTION

2/10/1 ---------------------------------------------------------------------------------------------------------------------
Discover the API Management service...

API Management components...
Azure API Management is made up of an API gateway, a management plane, and a developer portal.

    + The API gateway is the endpoint that:
        ++ Accepts API calls and routes them to appropriate backends
        ++ Verifies API keys and other credentials presented with requests
        ++ Enforces usage quotas and rate limits
        ++ Caches responses to improve response latency and minimize the load on backend services
        ++ 
    + The management plane is the administrative interface where you set up your API program. Use it to:
        ++ Provision and configure API Management service settings
        ++ Define or import API schema
        ++ Package APIs into products
        ++ Manage users
    + The Developer portal is an automatically generated, fully customizable website with the documentation of your APIs.
        ++ Read API documentation
        ++ Call an API via the interactive console
        ++ Create an account and subscribe to get API keys

Products...
    Products are how APIs are surfaced to developers.
    Products in API Management have one or more APIs, and are configured with a title, description, and terms of use.
    Products can be Open or Protected. Protected products must be subscribed to before they can be used, while open products can be used without a subscription.

Groups...
    Groups are used to manage the visibility of products to developers.
        + Administrators - Manage API Management service instances and create the APIs, operations, and products that are used by developers.
            Azure subscription administrators are members of this group.
        + Developers - Authenticated developer portal users that build applications using your APIs.
            Developers are granted access to the developer portal and build applications that call the operations of an API.
        + Guests - Unauthenticated developer portal users. They can be granted certain read-only access, like the ability to view APIs but not call them.

3/10/1 ---------------------------------------------------------------------------------------------------------------------
Explore API gateways...

!!!
    The API Management gateway (also called data plane or runtime) is the service component that's responsible 
        for proxying API requests, applying policies, and collecting telemetry.
    An API gateway sits between clients and services. It acts as a reverse proxy, routing requests from clients to services. It may also perform various cross-cutting tasks such as authentication, SSL termination, and rate limiting.
!!!

If you don't deploy a gateway, clients must send requests directly to back-end services. However, there are some potential problems with exposing services directly to clients:
    - It can result in complex client code. The client must keep track of multiple endpoints, and handle failures in a resilient way.
    - It creates coupling between the client and the backend.
    - A single operation might require calls to multiple services.
    - Each public-facing service must handle concerns such as authentication, SSL, and client rate limiting.

Managed and self-hosted...
    API Management offers both managed and self-hosted gateways:
        + Managed - The managed gateway is the default gateway component that is deployed in Azure for every API Management instance in every service tier.
        + Self-hosted - The self-hosted gateway is an optional, containerized version of the default managed gateway. It's useful for hybrid and multicloud scenarios where there's a requirement to run the gateways off of Azure in the same environments where API backends are hosted.

4/10/1 ---------------------------------------------------------------------------------------------------------------------
Explore API Management policies...

In Azure API Management, policies allow the publisher to change the behavior of the API through configuration. 
Policies are applied inside the gateway that sits between the API consumer and the managed API. The gateway receives all requests and usually forwards them unaltered to the underlying API.

Understanding policy configuration...
The policy definition is a simple XML document that describes a sequence of inbound and outbound statements.
E.g.:
    """
        <policies>
        <inbound>
            <!-- statements to be applied to the request go here -->
        </inbound>
        <backend>
            <!-- statements to be applied before the request is forwarded to 
                the backend service go here -->
        </backend>
        <outbound>
            <!-- statements to be applied to the response go here -->
        </outbound>
        <on-error>
            <!-- statements to be applied if there is an error condition go here -->
        </on-error>
        </policies>
    """

If there's an error during the processing of a request, 
    any remaining steps in the inbound, backend, or outbound sections 
    are skipped and execution jumps to the statements in the on-error section. 

Policy expressions...
Unless the policy specifies otherwise, policy expressions can be used as attribute values or text values in any of the API Management policies.
A policy expression is either:
    + a single C# statement enclosed in @(expression)
    + a multi-statement C# code block, enclosed in @{expression}, that returns a value

E.g.:
    """
        <policies>
            <inbound>
                <base />
                <set-header name="x-request-context-data" exists-action="override">
                    <value>@(context.User.Id)</value>
                    <value>@(context.Deployment.Region)</value>
            </set-header>
            </inbound>
        </policies>
    """

Apply policies specified at different scopes...
If you have a policy at the global level and a policy configured for an API, then whenever that particular API is used both policies are applied.

Filter response content...
The policy defined in following example demonstrates how to filter
    data elements from the response payload based on the product associated with the request.

    """
        <policies>
            <inbound>
                <base />
            </inbound>
            <backend>
                <base />
            </backend>
            <outbound>
                <base />
                <choose>
                <when condition="@(context.Response.StatusCode == 200 && context.Product.Name.Equals("Starter"))">
                    <!-- NOTE that we are not using preserveContent=true when deserializing response body stream into a JSON object since we don't intend to access it again. See details on https://learn.microsoft.com/azure/api-management/api-management-transformation-policies#SetBody -->
                    <set-body>
                    @{
                        var response = context.Response.Body.As<JObject>();
                        foreach (var key in new [] {"minutely", "hourly", "daily", "flags"}) {
                        response.Property (key).Remove ();
                    }
                    return response.ToString();
                    }
                </set-body>
                </when>
                </choose>    
            </outbound>
            <on-error>
                <base />
            </on-error>
        </policies>
    """


5/10/1 ---------------------------------------------------------------------------------------------------------------------
Create advanced policies...

This unit provides a reference for the following API Management policies:
    + Control flow 
    + Forward request
    + Limit concurrency
    + Log to Event Hub
    + Mock response
    + Retry

    1- Control flow:
        The choose policy applies enclosed policy statements based on the 
            outcome of evaluation of boolean expressions, similar to an if-then-else or a switch construct in a programming language.
        """
            <choose>
                <when condition="Boolean expression | Boolean constant">
                    <!— one or more policy statements to be applied if the above condition is true  -->
                </when>
                <when condition="Boolean expression | Boolean constant">
                    <!— one or more policy statements to be applied if the above condition is true  -->
                </when>
                <otherwise>
                    <!— one or more policy statements to be applied if none of the above conditions are true  -->
            </otherwise>
            </choose>
        """

    2- Forward request:
        """
            <forward-request timeout="time in seconds" follow-redirects="true | false"/>
        """
    
    3- Limit concurrency:
            The limit-concurrency policy prevents enclosed policies from executing by more than the specified number of requests 
                at any time. Upon exceeding that number, new requests will fail immediately with a 429 Too Many Requests status code.

            """
                <limit-concurrency key="expression" max-count="number">
                    <!— nested policy statements -->
                </limit-concurrency> 
            """

    4- Log to Event Hub:
        The log-to-eventhub policy sends messages in the specified format to an Event Hub defined by a Logger entity
        """
            <log-to-eventhub logger-id="id of the logger entity" partition-id="index of the partition where messages are sent" partition-key="value used for partition assignment">
                Expression returning a string to be logged
            </log-to-eventhub>
        """

    5- Mock response:
        The mock-response, as the name implies, is used to mock APIs and operations. It aborts normal pipeline execution and returns a mocked response to the caller.
        """
            <mock-response status-code="code" content-type="media type"/>
        """

    6- Retry:
        The retry policy executes its child policies once and then retries their execution until the retry condition becomes false or retry count is exhausted.
        """
            <retry
                condition="boolean expression or literal"
                count="number of retry attempts"
                interval="retry interval in seconds"
                max-interval="maximum retry interval in seconds"
                delta="retry interval delta in seconds"
                first-fast-retry="boolean expression or literal">
                    <!-- One or more child policies. No restrictions -->
            </retry>
        """

    7- Return response:
        The return-response policy aborts pipeline execution and returns either a default or custom response to the caller.
        """
            <return-response response-variable-name="existing context variable">
                <set-header/>
                <set-body/>
                <set-status/>
            </return-response>
        """

6/10/1 ---------------------------------------------------------------------------------------------------------------------
Secure APIs by using subscriptions...

!!!
    When you publish APIs through API Management, it's easy and common to secure access to those APIs by using subscription keys. 
    Developers who need to consume the published APIs must include a valid subscription key in HTTP requests when they make calls to those APIs. 
    Otherwise, the calls are rejected immediately by the API Management gateway. They aren't forwarded to the back-end services.
!!!

!!!
    To get a subscription key for accessing APIs, a subscription is required. A subscription is essentially a named container for a pair of subscription keys. 
    Developers who need to consume the published APIs can get subscriptions. 
    And they don't need approval from API publishers. API publishers can also create subscriptions directly for API consumers.
!!!

Subscriptions and Keys...
    A subscription key is a unique auto-generated key that can be passed through in the headers of the client request or as a query string parameter.
    The three main subscription scopes are:
        + All APIs: Applies to every API accessible from the gateway
        + Single API: This scope applies to a single imported API and all of its endpoints
        + Product: A product is a collection of one or more APIs that you configure in API Management.
            You can assign APIs to more than one product. Products can have different access rules, usage quotas, and terms of use.

!!!
    Applications that call a protected API must include the key in every request.
!!!

Every subscription has two keys, a primary and a secondary.
Having two keys makes it easier when you do need to regenerate a key. 
For example, if you want to change the primary key and avoid downtime, use the secondary key in your apps.

For products where subscriptions are enabled, clients must supply a key when making calls to APIs in that product. 
Developers can obtain a key by submitting a subscription request. If you approve the request, you must send them the subscription key securely, for example, in an encrypted message. 
This step is a core part of the API Management workflow.

Call an API with the subscription key...
Applications must include a valid key in all HTTP requests when they make calls to API endpoints that are protected by a subscription.
!!!
    Keys can be passed in the request header, or as a query string in the URL.
!!!
!!!
    The default header name is Ocp-Apim-Subscription-Key, and the default query string is subscription-key.
!!!

You can use tools to send request to APIs or you can use curl:
    curl --header "Ocp-Apim-Subscription-Key: <key string>" https://<apim gateway>.azure-api.net/api/path
        or as query string 
    curl https://<apim gateway>.azure-api.net/api/path?subscription-key=<key string>


7/10/1 ---------------------------------------------------------------------------------------------------------------------
Secure APIs by using certificates...
Certificates can be used to provide Transport Layer Security (TLS) mutual authentication between the client and the API gateway.

Transport Layer Security client authentication...
With TLS client authentication, the API Management gateway can inspect the certificate contained within the client request and check for properties like:
    + Certificate Authority (CA)
    + Thumbprint
    + Subject
    + Expiration Date

Client certificates are signed to ensure that they are not tampered with. When a partner sends you a certificate, verify that it comes from them and not an imposter. There are two common ways to verify a certificate:
    + Check who issued the certificate. 
    + If the certificate is issued by the partner, verify that it came from them.

Accepting client certificates in the Consumption tier...
    The Consumption tier in API Management is designed to conform with serverless design principals.
    If you build your APIs from serverless technologies, such as Azure Functions, this tier is a good fit.
    In the Consumption tier, you must explicitly enable the use of client certificates, which you can do on the Custom domains page. 
    ! This step is not necessary in other tiers. !

Certificate Authorization Policies...
    Create these policies in the inbound processing policy file within the API Management gateway:

Check the thumbprint of a client certificate...
    Every client certificate includes a thumbprint, which is a hash, calculated from other certificate properties.
    The thumbprint ensures that the values in the certificate have not been altered since the certificate was issued by the certificate authority.
    You can check the thumbprint in your policy.
    E.g.:
        """
            <choose>
                <when condition="@(context.Request.Certificate == null || context.Request.Certificate.Thumbprint != "desired-thumbprint")" >
                    <return-response>
                        <set-status code="403" reason="Invalid client certificate" />
                    </return-response>
                </when>
            </choose>
        """

Check the thumbprint against certificates uploaded to API Management...
    In the previous example, only one thumbprint would work so only one certificate would be validated. 
    Usually, each customer or partner company would pass a different certificate with a different thumbprint.
    To support this scenario, obtain the certificates from your partners and use the Client certificates page in the Azure portal to upload them to the API Management resource.
    Then add this code to your policy:
    """
        <choose>
            <when condition="@(context.Request.Certificate == null || !context.Request.Certificate.Verify()  || !context.Deployment.Certificates.Any(c => c.Value.Thumbprint == context.Request.Certificate.Thumbprint))" >
                <return-response>
                    <set-status code="403" reason="Invalid client certificate" />
                </return-response>
            </when>
        </choose>
    """

Check the issuer and subject of a client certificate...
    This example checks the issuer and subject of the certificate passed in the request:
    """
        <choose>
            <when condition="@(context.Request.Certificate == null || context.Request.Certificate.Issuer != "trusted-issuer" || context.Request.Certificate.SubjectName.Name != "expected-subject-name")" >
                <return-response>
                    <set-status code="403" reason="Invalid client certificate" />
                </return-response>
            </when>
        </choose>
    """

8/10/1 ---------------------------------------------------------------------------------------------------------------------
EXERCISE

9/10/1 ---------------------------------------------------------------------------------------------------------------------
TEST

10/10/1 ---------------------------------------------------------------------------------------------------------------------
SUMMARY


