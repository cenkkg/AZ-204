1/7/1 ---------------------------------------------------------------------------------------------------------------------
INTRODUCTION

The Microsoft identity platform for developers is a set of tools that includes authentication service, 
    open-source libraries, and application management tools.

2/7/1 ---------------------------------------------------------------------------------------------------------------------
Explore the Microsoft identity platform...

he Microsoft Identity Platform (formerly known as Azure Active Directory or Azure AD) is a cloud-based service provided by Microsoft that serves as an identity and access management (IAM) solution.

The Microsoft identity platform helps you build applications your users and customers can sign in to using their Microsoft identities or social accounts, 
    and provide authorized access to your own APIs or Microsoft APIs like Microsoft Graph.

There are several components that make up the Microsoft identity platform:
    - OAuth 2.0 and OpenID Connect standard-compliant authentication service enabling developers to authenticate several identity types, including:
        -+ Work or school accounts, provisioned through Azure Active Directory
        -+ Personal Microsoft account, like Skype, Xbox, and Outlook.com
        -+ Social or local accounts, by using Azure Active Directory B2C
    - Open-source libraries: Microsoft Authentication Libraries (MSAL) and support for other standards-compliant libraries
    - Application management portal: A registration and configuration experience in the Azure portal, along with the other Azure management capabilities.
    - Application configuration API and PowerShell: Programmatic configuration of your applications through the Microsoft Graph API and PowerShell so you can automate your DevOps tasks.

3/7/1 ---------------------------------------------------------------------------------------------------------------------

To delegate Identity and Access Management functions to Azure Active Directory, 
    an application must be registered with an Azure Active Directory tenant.

When you register your application with Azure Active Directory, you're creating an identity configuration for your 
    application that allows it to integrate with Azure Active Directory. When you register an app in the Azure portal,
    you choose whether it is:
        - Single tenant: only accessible in your tenant
        - Multi-tenant: accessible in other tenants


---------------------------------------------------------------------------------------- 1
Application object...
!!! An Azure Active Directory application !!!
An Azure Active Directory application is defined by its one and only application object.
The application object resides in the Azure Active Directory tenant where the application was registered (known as the application's "home" tenant).
!!! A service principal is created in every tenant where the application is used. !!!
----------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------- 2
Service principal object...
To access resources secured by an Azure Active Directory tenant, the entity that requires access must be represented by a security principal. 
    This is true for both users (user principal) and applications (service principal).
        - user principal
        - service principal
    The security principal defines the access policy and permissions for the user/application in the Azure Active Directory tenant. 
    This enables core features such as authentication of the user/application during sign-in, and authorization during resource access.
----------------------------------------------------------------------------------------

The security principal defines the access policy and permissions for the user/application in the Azure Active Directory tenant. 
    This enables core features such as authentication of the user/application during sign-in, and authorization during resource access.

There are three types of service principal:
    - Application: This type of service principal is the local representation, or application instance, of a global application object in a single tenant or directory.
                        The service principal object defines what the app can actually do in the specific tenant, who can access the app, and what resources the app can access.
    - Managed identity: This type of service principal is used to represent a managed identity.
    - Legacy

Relationship between application objects and service principals...
!!! 
The application object is the global representation of your application for use across all tenants, 
    and the service principal is the local representation for use in a specific tenant. 
plate from which common and default properties are derived for use in creating corresponding service principal objects.
    - A one to one relationship with the software application, and
    - A one to many relationship with its corresponding service principal object(s).
!!!

!!! 
A single-tenant application has only one service principal (in its home tenant), created and consented for use during application registration. 
A multi-tenant application also has a service principal created in each tenant where a user from that tenant has consented to its use.
!!!!

NOTE: There is a video which may help to understand Azure AC - tenant etc. : https://www.youtube.com/watch?v=e-GoDEkGkug

4/7/1 ---------------------------------------------------------------------------------------------------------------------
Discover permissions and consent...

Applications that integrate with the Microsoft identity platform follow an 
    authorization model that gives users and administrators control over how data can be accessed.

!!!
The Microsoft identity platform implements the OAuth 2.0 authorization protocol. 
OAuth 2.0 is a method through which a third-party app can access web-hosted resources on behalf of a user. 
Any web-hosted resource that integrates with the Microsoft identity platform has a resource identifier, or application ID URI.
!!!

Permission types...
    The Microsoft identity platform supports two types of permissions:
        - Delegated permissions: Get permissions as user.
        - App-only access permissions: Are used by apps that run without a signed-in user present.

Consent types...
    Applications in Microsoft identity platform rely on consent in order to gain access to necessary resources or APIs.
    There are three consent types: static user consent, incremental and dynamic user consent, and admin consent.
        - Static user consent: In the static user consent scenario, you must specify all the permissions it needs in the app's configuration in the Azure portal.
        - Incremental and dynamic user consent
        - Admin consent

5/7/1 ---------------------------------------------------------------------------------------------------------------------
?

6/7/1 ---------------------------------------------------------------------------------------------------------------------
TEST

7/7/1 ---------------------------------------------------------------------------------------------------------------------
SUMMARY




