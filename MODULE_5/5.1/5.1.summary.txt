1/8/1 ---------------------------------------------------------------------------------------------------------------------
Azure Container Registry (ACR) is a managed, private Docker registry service based on the open-source Docker Registry 2.0.
Create and maintain Azure container registries to store and manage your private Docker container images.

Use cases:
    Pull images from an Azure container registry to various deployment targets:
        Scalable orchestration systems: 
            that manage containerized applications across clusters of hosts, including Kubernetes, DC/OS, and Docker Swarm.
        Azure services:
            that support building and running applications at scale, 
            including Azure Kubernetes Service (AKS), App Service, Batch, Service Fabric, and others.

2/8/1 ---------------------------------------------------------------------------------------------------------------------
Azure Container Registry service tiers:
    - Basic: A cost-optimized entry point for developers learning about Azure Container Registry.
    - Standard: Standard registries offer the same capabilities as Basic, with increased included storage and image throughput. 
    - Premium: Premium adds features such as geo-replication for managing a single registry across multiple regions, content trust for image tag signing, and private link with private endpoints to restrict access to the registry.

3/8/1 ---------------------------------------------------------------------------------------------------------------------
! Basic, Standard, and Premium Azure container registry tiers benefit from advanced Azure storage features like encryption-at-rest for image data security and geo-redundancy for image data protection. !

    - Encryption-at-rest
    - Regional storage
    - Zone redundancy
    - Scalable storage
        ! Deleted registry resources like repositories, images, and tags can't be recovered after deletion. !

4/8/1 ---------------------------------------------------------------------------------------------------------------------
    Build and manage containers with tasks:
        * Quick task - Build and push a single container image to a container registry on-demand, in Azure, without needing a local Docker Engine installation. Think docker build, docker push in the cloud.
        * Automatically triggered tasks - Enable one or more triggers to build an image:
            - Trigger on source code update
            - Trigger on base image update
            - Trigger on a schedule
        * Multi-step task - Extend the single image build-and-push capability of ACR Tasks with multi-step, multi-container-based workflows.

! Each ACR Task has an associated source code context - the location of a set of source files used to build a container image or other artifact. Example contexts include a Git repository or a local filesystem. !

* Quick task:
    Before you commit your first line of code, ACR Tasks's quick task feature can provide an integrated development experience by offloading your container image builds to Azure.
    Using the familiar docker build format, the az acr build command in the Azure CLI takes a context (the set of files to build), sends it to ACR Tasks and, by default, pushes the built image to its registry upon completion.

* Trigger task on source code update:
    Trigger a container image build or multi-step task when code is committed, or a pull request is made or updated, to a Git repository in GitHub or Azure DevOps Services. 
    For example, configure a build task with the Azure CLI command az acr task create by specifying a Git repository and optionally a branch and Dockerfile. 
    When your team updates code in the repository, an ACR Tasks-created webhook triggers a build of the container image defined in the repo.

* Trigger on base image update:
    You can set up an ACR task to track a dependency on a base image when it builds an application image. When the updated base image is pushed to your registry, or a base image is updated in a public repo such as in Docker Hub, ACR Tasks can automatically build any application images based on it.

* Schedule a task:
    Define one or more time triggers, when you create or update the task.

* Multi-step tasks:
    Multi-step tasks, defined in a YAML file specify individual build and push operations for container images or other artifacts.
    They can also define the execution of one or more containers, with each step using the container as its execution environment.

!!! By default, ACR Tasks builds images for the Linux OS and the amd64 architecture. 
Specify the --platform tag to build Windows images or Linux images for other architectures. 
Specify the OS and optionally a supported architecture in OS/architecture format (for example, --platform Linux/arm). 
For ARM architectures, optionally specify a variant in OS/architecture/variant format (for example, --platform Linux/arm64/v8): !!!

5/8/1 ---------------------------------------------------------------------------------------------------------------------
A Dockerfile is a script that contains a series of instructions that are used to build a Docker image.
It includes: 
    - The base or parent image we use to create the new image
    - Commands to update the base OS and install other software
    - Build artifacts to include, such as a developed application
    - Services to expose, such a storage and network configuration
    - Command to run when the container is launched

Example of basic DockerFile:
**********************************************************************
# Use the .NET 6 runtime as a base image
FROM mcr.microsoft.com/dotnet/runtime:6.0

# Set the working directory to /app
WORKDIR /app

# Copy the contents of the published app to the container's /app directory
COPY bin/Release/net6.0/publish/ .

# Expose port 80 to the outside world
EXPOSE 80

# Set the command to run when the container starts
CMD ["dotnet", "MyApp.dll"]
**********************************************************************

6/8/1 ---------------------------------------------------------------------------------------------------------------------
EXERCISE

az group create --name az204-acr-rg --location <myLocation> // Creating resource group for ACR
az acr create --resource-group az204-acr-rg --name <myContainerRegistry> --sku Basic // Creating ACR in specific resource group (Basic)

az acr build // This command is building image with Dockerfile and after that push it to our registry. Example of it:
az acr build --image sample/hello-world:v1  \
    --registry <myContainerRegistry> \
    --file Dockerfile .

We can check result of above commands with this command:
az acr repository list --name <myContainerRegistry> --output table

This command will list tags on the specific/given repository.
az acr repository show-tags --name <myContainerRegistry> \
    --repository sample/hello-world --output table


! Repository: sample/hello-world
! Container Registry: Registry which stores repositories

// This command will run image, so container.
az acr run --registry <myContainerRegistry> \
    --cmd '$Registry/sample/hello-world:v1' /dev/null

// You can delete resource group by this command: 
az group delete --name az204-acr-rg --no-wait

7/8/1 ---------------------------------------------------------------------------------------------------------------------
EXERCISE

8/8/1 ---------------------------------------------------------------------------------------------------------------------
SUMMARY